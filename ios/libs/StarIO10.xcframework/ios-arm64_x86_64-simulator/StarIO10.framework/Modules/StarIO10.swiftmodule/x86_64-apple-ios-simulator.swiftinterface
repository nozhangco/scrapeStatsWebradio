// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name StarIO10
import CoreBluetooth
import ExternalAccessory
import Foundation
import Network
@_exported import StarIO10
import StarIO10.StarLogger
import StarIO10.StarXpandCommandParserWrapper
import Swift
import UIKit
import _Concurrency
extension StarIO10.StarPrinter {
  @objc dynamic public func open(completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc dynamic public func close(completion: @escaping () -> Swift.Void)
  @objc dynamic public func read(size: Swift.Int, completion: @escaping (Foundation.Data?, Swift.Error?) -> Swift.Void)
  @objc dynamic public func print(raw: Foundation.Data, completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc dynamic public func print(command: Swift.String, completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc dynamic public func getStatus(completion: @escaping (StarIO10.StarPrinterStatus?, Swift.Error?) -> Swift.Void)
}
@objc(STARIO10StarPrinterEmulation) public enum StarPrinterEmulation : Swift.Int, Swift.CustomStringConvertible {
  case unknown
  case starLine
  case starDot
  case starGraphic
  case starPRNT
  case escPos
  case escPosMobile
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension StarIO10.StarXpandCommand.Display {
  @objc(STARIO10StarXpandCommandDisplayCursorState) public enum CursorState : Swift.Int {
    case on
    case blink
    case off
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension StarIO10.StarXpandCommand {
  @_inheritsConvenienceInitializers @objcMembers @objc(STARIO10StarXpandCommandDisplayBuilder) public class DisplayBuilder : ObjectiveC.NSObject {
    @objc public func styleInternationalCharacter(_ type: StarIO10.StarXpandCommand.Display.InternationalCharacterType) -> Self
    @objc public func styleCharacterEncoding(_ type: StarIO10.StarXpandCommand.Display.CharacterEncodingType) -> Self
    @objc public func styleCursorPositionTo(_ parameter: StarIO10.StarXpandCommand.Display.PositionParameter) -> Self
    @objc public func actionClearLine() -> Self
    @objc public func actionClearAll() -> Self
    @objc public func actionSetBackLightState(_ on: Swift.Bool) -> Self
    @objc public func actionSetCursorState(_ state: StarIO10.StarXpandCommand.Display.CursorState) -> Self
    @objc public func actionSetContrast(_ value: StarIO10.StarXpandCommand.Display.Contrast) -> Self
    @objc public func actionShowText(_ content: Swift.String) -> Self
    @objc public func actionShowImage(_ parameter: StarIO10.StarXpandCommand.Display.ImageParameter) -> Self
    @objc override dynamic public init()
    @objc deinit
  }
}
extension StarIO10.StarXpandCommand {
  @objcMembers @objc(STARIO10StarXpandCommandMagnificationParameter) public class MagnificationParameter : ObjectiveC.NSObject {
    @objc final public let width: Swift.Int
    @objc final public let height: Swift.Int
    @objc public init(width: Swift.Int, height: Swift.Int)
    @objc deinit
  }
}
extension StarIO10.StarXpandCommand.Bezel {
  @objc(STARIO10StarXpandCommandBezelLEDType) public enum LEDType : Swift.Int {
    case holding
    case error
    case idle
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@_inheritsConvenienceInitializers @objc public class Internal : ObjectiveC.NSObject {
  @_inheritsConvenienceInitializers @objc(STARIO10InternalInterface) @objcMembers public class InternalInter